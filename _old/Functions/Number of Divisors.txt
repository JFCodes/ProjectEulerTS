Public Function numberOfDivisors(ByVal number As Long) As Integer

    Dim limit As Integer = Math.Ceiling(Math.Sqrt(number))
    Dim vector(limit) As short
    Dim remainder As Long = number
    Dim divisors As Integer = 1
    Dim semiRemainder As Integer = 0

    Do While remainder > 1

        semiRemainder = remainder
        For i = 2 To limit
            If remainder Mod i = 0 Then
                vector(i) += 1
                remainder = remainder / i
                Exit For
            End If
        Next
        If remainder = semiRemainder Then
            remainder = 1
            vector(0) = 1
        End If
    Loop


    For i = 0 To limit
        If vector(i) > 0 Then
            remainder *= (vector(i) + 1)
        End If
    Next

    Return remainder
End Function


public static int numberOfDivisors(long number){
            
    int limit = Convert.ToInt32(Math.Ceiling(Math.Sqrt(number)));
    short[] vector = new short[limit + 1];
    long remainder = number;
    long semiRemainder = 0;

    while (remainder > 1){

        semiRemainder = remainder;

        for (int i = 2; i <= limit; i++){
            if (remainder % i == 0){
                vector[i]++;
                remainder = remainder/i;
                break;
            }
        }

        if (remainder == semiRemainder){
            remainder = 1;
            vector[0] = 1;
        }
    }

    for (int i = 0; i <= limit; i++){
        if (vector[i] > 0){
            remainder *= (vector[i] + 1);        
        }
    }
    return Convert.ToInt32(remainder);
}
        