Module Module1

    'Is proven that any hexagonal number is also triangular. S
    Sub Main()

        Dim endTime As Double
        Dim starTime As Double = Timer
        Dim answer As Integer = 0

        Dim answerstring As String = ""
        Dim sequence(98) As Integer
        For i = 0 To sequence.Length - 1
            If (i + 2) Mod 3 = 0 Then
                sequence(i) = ((i + 2) / 3) * 2
            Else
                sequence(i) = 1
            End If
        Next
        answerstring = processFraction(2, sequence)
        For Each c As Char In answerstring
            answer += CInt(c.ToString)
        Next
        endTime = Timer
        Console.WriteLine("Answer: " & answer)
        Console.WriteLine("Excution time: " & endTime - starTime)
        Console.ReadKey()
    End Sub
    Function processFraction(fixo As Integer, sequence() As Integer) As String
        Dim numerator As String
        Dim subnum As String = 1
        Dim subdem As String = sequence(sequence.Length - 1)
        Dim hold As String


        For i = sequence.Length - 1 To 1 Step -1
            hold = subdem
            For j = 1 To sequence(i - 1) - 1
                hold = SumofBigNumbers(hold, subdem)
            Next
            subnum = SumofBigNumbers(hold, subnum)
            hold = subdem
            subdem = subnum
            subnum = hold
        Next

        hold = subdem
        For i = 1 To fixo - 1
            numerator = SumofBigNumbers(hold, subdem)
        Next
        numerator = SumofBigNumbers(numerator, subnum)

        Return numerator
    End Function
    Function SumofBigNumbers(number1 As String, number2 As String) As String
        Dim result As String = ""
        Dim maxLength As Integer = Math.Max(number1.Length, number2.Length)
        Dim char1 As Short
        Dim char2 As Short
        Dim transporter As Short = 0
        Dim subSum As Integer

        For i = 1 To maxLength
            If i <= number1.Length Then
                char1 = CInt(number1(number1.Length - i).ToString)
            Else
                char1 = 0
            End If

            If i <= number2.Length Then
                char2 = CInt(number2(number2.Length - i).ToString)
            Else
                char2 = 0
            End If

            subSum = char1 + char2 + transporter
            result = CStr(subSum Mod 10) & result
            transporter = subSum \ 10
        Next

        If transporter > 0 Then
            result = transporter & result
        End If

        Return result
    End Function
End Module