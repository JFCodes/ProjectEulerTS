'FALHA POR 1 - NÃO PERCEBO PORQUÊ'

Module Module1

    Sub Main()
        Dim endTime As Double
        Dim starTime As Double = Timer
        Dim resposta As Integer = 1

        Dim limite As Integer = 100

        resposta = (limite - 1) * (limite - 1)
        Dim paresRepetidos As Integer = 0

        For i = 2 To limite

            paresRepetidos += PotenciasEquivalentes(i, limite)
        Next

        resposta = resposta - paresRepetidos

        endTime = Timer
        Console.WriteLine("Resposta: " & resposta)
        Console.WriteLine("Excution time: " & endTime - starTime)
        Console.ReadKey()
    End Sub

    Public Function PotenciasEquivalentes(base As Integer, limite As Integer)

        Dim proxBase As Integer = base * base
        Dim repetidos As Integer = 0
        Dim potenciaEqui As Integer = 2

        Do While proxBase <= limite
            repetidos += Math.Floor(limite / potenciaEqui) - 1
            proxBase = proxBase * base
            potenciaEqui += 1
        Loop

        Return repetidos
    End Function

End Module

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;


namespace ConsoleApplication3
{
    class Program
    {
        static void Main(string[] args){

            long answer = 1;
            Stopwatch timer = new Stopwatch();
            timer.Start();

            int limit = 100;
            answer = (limit - 1) * (limit - 1);
            int repeatedPairs = 0;

            for (int i = 2; i <= limit; i++){
                repeatedPairs += equiPowers(i, limit);
            }

            answer -= repeatedPairs;

                timer.Stop();
            Console.WriteLine("Answer: {0}", answer);
            Console.WriteLine("Processing time: {0}", timer.Elapsed);
            Console.ReadKey();
        }

        public static int equiPowers(int iBase, int limit){
            int nextBase = iBase * iBase, repeated = 0, equiPower = 2;

            while (nextBase <= limit){
                repeated +=limit / equiPower - 1;
                nextBase *= iBase;
                equiPower++;
            }

            return repeated;
        }
    }
}
