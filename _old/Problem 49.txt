Module Module1

    Sub Main()
        Dim endTime As Double
        Dim starTime As Double = Timer
        Dim answer As String = ""


        Dim limit As Integer = 9999
        Dim primeVector() As Boolean
        PrimeVectorSieveGenerator(primeVector, limit)

        For i = 7660 To limit
            If i <> 8147 Then
                If primeVector(i) And primeVector(i - 3330) And primeVector(i - 6660) _
                    And isaPermutation(i, i - 3330) And isaPermutation(i, i - 6660) Then
                    answer = CStr(i - 6660) & CStr(i - 3330) & CStr(i)
                    Exit For
                End If
            End If
        Next

        endTime = Timer
        Console.WriteLine("Resposta: " & answer)
        Console.WriteLine("Excution time: " & endTime - starTime)
        Console.ReadKey()
    End Sub
    Sub PrimeVectorSieveGenerator(ByRef vector() As Boolean, limit As Integer)

        ReDim vector(limit)

        For i = 2 To limit
            vector(i) = True
        Next
        For i = 2 To limit
            For j = 2 * i To limit Step i
                vector(j) = False
            Next
        Next

    End Sub
    Function isaPermutation(number1 As Long, number2 As Long) As Boolean

        Dim count1(9) As Integer
        Dim count2(9) As Integer

        For Each c As Char In number1.ToString
            count1(CInt(c.ToString)) += 1
        Next
        For Each c As Char In number2.ToString
            count2(CInt(c.ToString)) += 1
        Next

        For i = 0 To 9
            If count1(i) <> count2(i) Then Return False
        Next

        Return True

    End Function
End Module




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace ConsoleApplication3
{
    class Program
    {
        static void Main(string[] args)
        {

            string answer = "";
            Stopwatch timer = new Stopwatch();
            timer.Start();

            int limit = 9999;
            bool[] primeVector = PrimeVectorSieveGenerator(limit);

            for (int i = 7660; i <= limit; i++){
                if (i != 8147){
                    if (primeVector[i] && primeVector[i - 3330] && primeVector[i - 6660] 
                        && isaPermutation(i, i - 3330) && isaPermutation(i, i - 6660)){
                        answer = (i - 6660).ToString() + (i - 3330).ToString() + i.ToString();
                    }
                }
            }

            timer.Stop();
            Console.WriteLine("Answer: {0}", answer);
            Console.WriteLine("Processing time: {0}", timer.Elapsed);
            Console.ReadKey();
        }

        public static Boolean[] PrimeVectorSieveGenerator(int limit)
        {

            bool[] primeVector = new bool[limit + 1];

            for (int i = 2; i <= limit; i++)
            {
                primeVector[i] = true;
            }
            for (int i = 2; i <= limit; i++)
            {
                for (int j = 2 * i; j <= limit; j += i)
                {
                    primeVector[j] = false;
                }
            }

            return primeVector;
        }

        public static bool isaPermutation(long number1, long number2){
            int[] count1 = new int[10];
            int[] count2 = new int[10];

            foreach(char c in number1.ToString()){
                count1[(int)Char.GetNumericValue(c)] += 1;
            }

            foreach(char c in number2.ToString())
            {
                count2[(int)Char.GetNumericValue(c)] += 1;
            }

            for (int i = 0; i < 10; i++){
                if(count1[i] != count2[i]){
                    return false;
                }
            }
            return true;

        }
    }
}